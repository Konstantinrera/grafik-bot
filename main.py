import logging
import datetime
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = "8483629759:AAHn4v5OzflQQ57qV1gblW4XMa1uACzPAFI"
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/14j3toMy4boNzDxA1eCe2fuxpsrFN8PraM2oHBgCowy8/edit?usp=sharing"

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(SPREADSHEET_URL).sheet1

# === Telegram Bot ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def send_schedule(message: types.Message):
    today = datetime.datetime.now().strftime("%d.%m")  # –Ω–∞–ø—Ä–∏–º–µ—Ä 26.07
    date_row = sheet.row_values(2)  # –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (–¥–∞—Ç—ã)
    col_index = None

    # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
    for i, val in enumerate(date_row):
        if today in val:
            col_index = i
            break

    if col_index is None:
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ")
        return

    data = sheet.get_all_values()
    response = f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ ‚Äî {today}\n\n"

    for row in data[3:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if len(row) <= col_index:
            continue

        shift_type = row[0].strip().lower()
        name = row[1].strip()
        cell = row[col_index].strip().lower()

        if not name:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
        if "–ª—ñ–∫" in cell:
            response += f" {name} ‚Äî –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–πüå°Ô∏è\n"
        elif "—Ç—Ä–µ–Ω—ñ–Ω–≥" in cell:
            response += f" {name} ‚Äî —Ç—Ä–µ–Ω—ñ–Ω–≥\n"
        elif "–≤—ñ–¥–ø—É—Å—Ç–∫–∞" in cell or "–≤–ª–∞—Å–Ω–∏–π" in cell:
            response += f" {name} ‚Äî –≤—ñ–¥–ø—É—Å—Ç–∫–∞‚òÄÔ∏è\n"
        elif "—ñ–Ω—à–µ" in cell:
            response += f" {name} ‚Äî —ñ–Ω—à–µ\n"
        elif "–≤–∏—Ö" in cell or "–Ω–µ–º–∞—î" in cell:
            response += f" {name} ‚Äî –≤–∏—Ö—ñ–¥–Ω–∏–π\n"
        else:
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
                clean_cell = cell.replace("-", ":").strip()
                start = datetime.datetime.strptime(clean_cell, "%H:%M")

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã
                hours = 4
                if "4" in shift_type:
                    hours = 4
                    display_hours = "4"
                if "6" in shift_type:
                    hours = 6
                    display_hours = "6"
                elif "8" in shift_type:
                    hours = 9
                    display_hours = "8"

                end = (start + datetime.timedelta(hours=hours)).strftime("%H:%M")
                response += f" ‚úÖ[{display_hours} –≥–æ–¥] {name} ‚Äî –∑ {start.strftime('%H:%M')} –¥–æ {end}\n"
            except:
                response += f" {name} ‚Äî ‚ùóÔ∏è–Ω–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç ¬´{cell}¬ª\n"

    await message.answer(response)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)